name: Build and Release Ghostty

on:
  schedule:
    # Check for new tags every 6 hours
    - cron: '0 */6 * * *'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Specific tag to build (e.g., v1.0.1, leave empty for latest)'
        required: false
        default: ''
        type: string

permissions:
  contents: write

jobs:
  check-tag:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.get_tag.outputs.tag }}
      version: ${{ steps.version.outputs.version }}
      should_build: ${{ steps.check_release.outputs.should_build }}
    
    steps:
      - name: Get latest valid version tag
        id: get_tag
        run: |
          # Get all tags and filter only v*.*.* tags, excluding 'tip'
          UPSTREAM_TAGS=$(curl -s https://api.github.com/repos/ghostty-org/ghostty/tags | \
            grep '"name":' | \
            grep -o '"v[0-9][^"]*"' | \
            tr -d '"')
          
          if [[ -n "${{ github.event.inputs.tag }}" ]]; then
            # For manual tag input, check if it exists
            TAG="${{ github.event.inputs.tag }}"
            if echo "$UPSTREAM_TAGS" | grep -q "^${TAG}$"; then
              echo "tag=${TAG}" >> "$GITHUB_OUTPUT"
            else
              echo "Error: Tag ${TAG} not found in upstream repository"
              echo "Available tags:"
              echo "$UPSTREAM_TAGS"
              exit 1
            fi
          else
            # Get latest version tag
            LATEST_TAG=$(echo "$UPSTREAM_TAGS" | sort -V | tail -n1)
            echo "tag=${LATEST_TAG}" >> "$GITHUB_OUTPUT"
          fi
          
          echo "Available tags:"
          echo "$UPSTREAM_TAGS"
          echo "Selected tag output file:"
          cat "$GITHUB_OUTPUT"

      - name: Set version
        id: version
        run: |
          TAG=${{ steps.get_tag.outputs.tag }}
          echo "version=${TAG#v}" >> "$GITHUB_OUTPUT"
          echo "Version set to:"
          cat "$GITHUB_OUTPUT"

      - name: Check if build needed
        id: check_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG=${{ steps.get_tag.outputs.tag }}
          echo "Checking if build needed for tag: $TAG"
          
          # Get all releases from this repository
          RELEASES=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/$GITHUB_REPOSITORY/releases")
          
          # Check if we have a release for this tag
          TAG_RELEASE=$(echo "$RELEASES" | jq -r ".[] | select(.tag_name==\"$TAG\")")
          
          if [[ -n "${{ github.event.inputs.tag }}" ]]; then
            echo "Manual build requested, will build regardless"
            echo "should_build=true" >> "$GITHUB_OUTPUT"
          elif [[ -z "$TAG_RELEASE" ]]; then
            echo "No release found for tag $TAG, will build"
            echo "should_build=true" >> "$GITHUB_OUTPUT"
          else
            echo "Release already exists for tag $TAG, skipping build"
            echo "should_build=false" >> "$GITHUB_OUTPUT"
          fi
          
          echo "Decision output file:"
          cat "$GITHUB_OUTPUT"

  build-and-package:
    needs: check-tag
    if: needs.check-tag.outputs.should_build == 'true'
    runs-on: ${{ matrix.ubuntu }}
    strategy:
      matrix:
        ubuntu: [ubuntu-22.04, ubuntu-24.04]
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          echo "Installing dependencies for ${{ matrix.ubuntu }}"
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-4-dev libadwaita-1-dev gettext libxml2-utils pkg-config \
            git dpkg-dev debhelper
          echo "Dependencies installed successfully"

      - name: Get tagged source code (official source tarball)
        run: |
          VERSION="${{ needs.check-tag.outputs.version }}"
          echo "Downloading Ghostty official source tarball for ${VERSION}"
          wget "https://release.files.ghostty.org/${VERSION}/ghostty-${VERSION}.tar.gz"
          tar xzf "ghostty-${VERSION}.tar.gz"
          mv "ghostty-${VERSION}" ghostty
          echo "Source code extracted successfully"
          ls -la ghostty/

      - name: Download and extract Zig 0.14.1
        run: |
          echo "Downloading Zig compiler 0.14.1..."
          wget https://ziglang.org/download/0.14.1/zig-x86_64-linux-0.14.1.tar.xz
          tar xvf zig-x86_64-linux-0.14.1.tar.xz
          echo "Zig compiler extracted successfully"
          ls -la zig-x86_64-linux-0.14.1/

      - name: Build and Install Ghostty
        run: |
          cd ghostty
          echo "Building Ghostty with ReleaseFast optimization..."
          ../zig-x86_64-linux-0.14.1/zig build -Doptimize=ReleaseFast -fno-sys=gtk4-layer-shell
          ../zig-x86_64-linux-0.14.1/zig build -Doptimize=ReleaseFast -fno-sys=gtk4-layer-shell install -p ../install-root
          
          echo "Checking installed files:"
          find ../install-root -type f | sort

      - name: Create Debian package structure
        run: |
          VERSION="${{ needs.check-tag.outputs.version }}"
          UBUNTU_VERSION="${{ matrix.ubuntu }}"
          UBUNTU_VERSION="${UBUNTU_VERSION#ubuntu-}"
          
          echo "Creating package structure for Ubuntu $UBUNTU_VERSION"
          
          mkdir -p debian-package/DEBIAN
          mkdir -p debian-package/usr/bin
          mkdir -p debian-package/usr/share
          
          # Copy binary and application files
          cp -r install-root/bin/* debian-package/usr/bin/
          cp -r install-root/share/* debian-package/usr/share/
          
          # Set correct permissions
          chmod 755 debian-package/usr/bin/ghostty
          chmod 644 debian-package/usr/share/applications/com.mitchellh.ghostty.desktop
          
          # Create control file
          cat > debian-package/DEBIAN/control << EOF
          Package: ghostty
          Version: ${VERSION}
          Section: utils
          Priority: optional
          Architecture: amd64
          Depends: libgtk-4-1, libgtk4-layer-shell0, libadwaita-1-0, libxml2
          Maintainer: Mohamed Elashri <mail@elashri.com>
          Description: Modern Terminal Emulator
           Ghostty is a fast, feature-rich, and cross-platform terminal emulator
           that uses platform-native UI and GPU acceleration.
          EOF
          
          echo "Package structure created. Contents:"
          find debian-package -type f | sort

      - name: Build DEB package
        run: |
          VERSION="${{ needs.check-tag.outputs.version }}"
          UBUNTU_VERSION="${{ matrix.ubuntu }}"
          UBUNTU_VERSION="${UBUNTU_VERSION#ubuntu-}"
          
          echo "Building .deb package for Ubuntu $UBUNTU_VERSION"
          dpkg-deb --build debian-package
          
          # Rename package with Ubuntu version
          echo "Renaming package to include Ubuntu version"
          mv debian-package.deb "ghostty_${VERSION}_ubuntu${UBUNTU_VERSION}_amd64.deb"
          
          echo "Checking final .deb file:"
          ls -l "ghostty_${VERSION}_ubuntu${UBUNTU_VERSION}_amd64.deb"
          dpkg -c "ghostty_${VERSION}_ubuntu${UBUNTU_VERSION}_amd64.deb"

      - name: Package binary
        run: |
          UBUNTU_VERSION="${{ matrix.ubuntu }}"
          UBUNTU_VERSION="${UBUNTU_VERSION#ubuntu-}"
          
          echo "Creating portable binary archive for Ubuntu $UBUNTU_VERSION"
          mkdir -p release
          cp ghostty/zig-out/bin/ghostty release/
          tar czf "ghostty-linux-x86_64-ubuntu${UBUNTU_VERSION}.tar.gz" -C release .
          
          echo "Checking generated files:"
          ls -la "ghostty-linux-x86_64-ubuntu${UBUNTU_VERSION}.tar.gz"

      - name: List files before upload
        run: |
          echo "Current directory contents:"
          ls -R
          echo "Looking for DEB file:"
          find . -name "ghostty_*.deb"
          echo "Looking for TAR file:"
          find . -name "ghostty-linux-x86_64-*.tar.gz"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ghostty-${{ matrix.ubuntu }}
          path: |
            ghostty_*.deb
            ghostty-linux-x86_64-*.tar.gz

  create-release:
    needs: [check-tag, build-and-package]
    if: needs.check-tag.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          
      - name: Debug artifact structure
        run: |
          echo "Full directory structure:"
          ls -R artifacts/
          echo "Looking for DEB files:"
          find artifacts/ -name "*.deb"
          echo "Looking for TAR.GZ files:"
          find artifacts/ -name "*.tar.gz"
          
      - name: Prepare files for release
        run: |
          mkdir -p release
          find artifacts/ -name "*.deb" -exec cp {} release/ \;
          find artifacts/ -name "*.tar.gz" -exec cp {} release/ \;
          echo "Files ready for release:"
          ls -la release/
        
      - name: Create Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.check-tag.outputs.tag }}
          files: release/*
          draft: false
          prerelease: false
          generate_release_notes: true
